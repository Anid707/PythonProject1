{"name": "test_open_search_flight_page[Astana-Almaty-01.02.2024-07.02.2024]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"s__ta_SSbfNo_PsQ7Rdf70_ s__wz46TWgrOGMneOhk9MFQ s__Vuypbm6jmyvUVPy8M...tR\" data-test-id=\"date-01.02.2024\">1</div> is not clickable at point (617, 519). Other element would receive the click: <div class=\"s__NhCGXhDOELgUyu3f7gUv disabled\" tabindex=\"0\" role=\"gridcell\" aria-label=\"Thu Feb 01 2024\" aria-disabled=\"true\" aria-selected=\"false\">...</div>\n  (Session info: chrome=121.0.6167.140)\nStacktrace:\n\tGetHandleVerifier [0x00601673+52979]\n\t(No symbol) [0x00587961]\n\t(No symbol) [0x0046DD3D]\n\t(No symbol) [0x004AB79B]\n\t(No symbol) [0x004A9EB7]\n\t(No symbol) [0x004A7F1B]\n\t(No symbol) [0x004A70BD]\n\t(No symbol) [0x0049E010]\n\t(No symbol) [0x004C44EC]\n\t(No symbol) [0x0049DA4E]\n\t(No symbol) [0x004C4784]\n\t(No symbol) [0x004DB3FE]\n\t(No symbol) [0x004C4286]\n\t(No symbol) [0x0049C063]\n\t(No symbol) [0x0049CECD]\n\tGetHandleVerifier [0x00918D83+3294723]\n\tGetHandleVerifier [0x00956CC2+3548482]\n\tGetHandleVerifier [0x00951C9C+3527964]\n\tGetHandleVerifier [0x0069870E+671630]\n\t(No symbol) [0x00591EB4]\n\t(No symbol) [0x0058D808]\n\t(No symbol) [0x0058D92D]\n\t(No symbol) [0x0057F7E0]\n\tBaseThreadInitThunk [0x75167BA9+25]\n\tRtlInitializeExceptionChain [0x7725BD2B+107]\n\tRtlClearBits [0x7725BCAF+191]", "trace": "self = <test_main_page.TestMainPage object at 0x000002CCA4F55460>, test_setup = None, from_city = 'Astana', to_city = 'Almaty', start_date = '01.02.2024'\nend_date = '07.02.2024'\n\n    @pytest.mark.parametrize(\"from_city, to_city, start_date, end_date\", [(\"Astana\", \"Almaty\", \"01.02.2024\", \"07.02.2024\"),(\"Istanbul\", \"Dubai\", \"05.02.2024\", \"10.02.2024\")])\n    def test_open_search_flight_page(self, test_setup, from_city, to_city, start_date, end_date):\n        self.logger.info(\"Opening Main page!\")\n        main_page = MainPage(driver)\n        main_page.open()\n        self.logger.info(\"Entering the form data!\")\n>       search_flight_page = main_page.search_flights(from_city, to_city, start_date, end_date)\n\npageObjectTests\\test_main_page.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\main_page.py:66: in search_flights\n    start_date.click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CCA5C2BC80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x75167BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7725BD2B+107]\\\\n\\\\tRtlClearBits [0x7725BCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"s__ta_SSbfNo_PsQ7Rdf70_ s__wz46TWgrOGMneOhk9MFQ s__Vuypbm6jmyvUVPy8M...tR\" data-test-id=\"date-01.02.2024\">1</div> is not clickable at point (617, 519). Other element would receive the click: <div class=\"s__NhCGXhDOELgUyu3f7gUv disabled\" tabindex=\"0\" role=\"gridcell\" aria-label=\"Thu Feb 01 2024\" aria-disabled=\"true\" aria-selected=\"false\">...</div>\nE         (Session info: chrome=121.0.6167.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00601673+52979]\nE       \t(No symbol) [0x00587961]\nE       \t(No symbol) [0x0046DD3D]\nE       \t(No symbol) [0x004AB79B]\nE       \t(No symbol) [0x004A9EB7]\nE       \t(No symbol) [0x004A7F1B]\nE       \t(No symbol) [0x004A70BD]\nE       \t(No symbol) [0x0049E010]\nE       \t(No symbol) [0x004C44EC]\nE       \t(No symbol) [0x0049DA4E]\nE       \t(No symbol) [0x004C4784]\nE       \t(No symbol) [0x004DB3FE]\nE       \t(No symbol) [0x004C4286]\nE       \t(No symbol) [0x0049C063]\nE       \t(No symbol) [0x0049CECD]\nE       \tGetHandleVerifier [0x00918D83+3294723]\nE       \tGetHandleVerifier [0x00956CC2+3548482]\nE       \tGetHandleVerifier [0x00951C9C+3527964]\nE       \tGetHandleVerifier [0x0069870E+671630]\nE       \t(No symbol) [0x00591EB4]\nE       \t(No symbol) [0x0058D808]\nE       \t(No symbol) [0x0058D92D]\nE       \t(No symbol) [0x0057F7E0]\nE       \tBaseThreadInitThunk [0x75167BA9+25]\nE       \tRtlInitializeExceptionChain [0x7725BD2B+107]\nE       \tRtlClearBits [0x7725BCAF+191]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "82c45227-917d-4928-9528-098b673fdcf9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "from_city", "value": "'Astana'"}, {"name": "to_city", "value": "'Almaty'"}, {"name": "start_date", "value": "'01.02.2024'"}, {"name": "end_date", "value": "'07.02.2024'"}], "start": 1706982359713, "stop": 1706982378637, "uuid": "3deb371b-372a-4d21-bf38-3be9e0d6288e", "historyId": "0a07d1248eaebc9695cb112f0833aaea", "testCaseId": "bb0e53ce091bdbc3596501f9fe6a31ff", "fullName": "pageObjectTests.test_main_page.TestMainPage#test_open_search_flight_page", "labels": [{"name": "parentSuite", "value": "pageObjectTests"}, {"name": "suite", "value": "test_main_page"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "LAPTOP-PCS77GDM"}, {"name": "thread", "value": "13184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pageObjectTests.test_main_page"}]}