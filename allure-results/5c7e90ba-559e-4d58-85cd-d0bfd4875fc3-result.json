{"name": "test_open_search_flight_page[Istanbul-Dubai-05.02.2024-10.02.2024]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=121.0.6167.140); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00601673+52979]\n\t(No symbol) [0x00587961]\n\t(No symbol) [0x0046DD3D]\n\t(No symbol) [0x00471F90]\n\t(No symbol) [0x00473CE7]\n\t(No symbol) [0x004DBDD0]\n\t(No symbol) [0x004C44EC]\n\t(No symbol) [0x004DB3FE]\n\t(No symbol) [0x004C4286]\n\t(No symbol) [0x0049C063]\n\t(No symbol) [0x0049CECD]\n\tGetHandleVerifier [0x00918D83+3294723]\n\tGetHandleVerifier [0x00956CC2+3548482]\n\tGetHandleVerifier [0x00951C9C+3527964]\n\tGetHandleVerifier [0x0069870E+671630]\n\t(No symbol) [0x00591EB4]\n\t(No symbol) [0x0058D808]\n\t(No symbol) [0x0058D92D]\n\t(No symbol) [0x0057F7E0]\n\tBaseThreadInitThunk [0x75167BA9+25]\n\tRtlInitializeExceptionChain [0x7725BD2B+107]\n\tRtlClearBits [0x7725BCAF+191]", "trace": "self = <test_main_page.TestMainPage object at 0x000002CCA5C71FA0>, test_setup = None, from_city = 'Istanbul', to_city = 'Dubai', start_date = '05.02.2024'\nend_date = '10.02.2024'\n\n    @pytest.mark.parametrize(\"from_city, to_city, start_date, end_date\", [(\"Astana\", \"Almaty\", \"01.02.2024\", \"07.02.2024\"),(\"Istanbul\", \"Dubai\", \"05.02.2024\", \"10.02.2024\")])\n    def test_open_search_flight_page(self, test_setup, from_city, to_city, start_date, end_date):\n        self.logger.info(\"Opening Main page!\")\n        main_page = MainPage(driver)\n        main_page.open()\n        self.logger.info(\"Entering the form data!\")\n        search_flight_page = main_page.search_flights(from_city, to_city, start_date, end_date)\n        self.logger.info(\"Form data is submitted!\")\n>       assert search_flight_page.is_search_result_found()\n\npageObjectTests\\test_main_page.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\search_flight_page.py:22: in is_search_result_found\n    print(len(self.from_city))\npageObjects\\search_flight_page.py:13: in from_city\n    return self.wait.until(ec.visibility_of_any_elements_located((By.XPATH, \"//*[@data-test-id='origin-endpoint']/div[2]/span\")))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:205: in _predicate\n    return [element for element in driver.find_elements(*locator) if _element_if_visible(element)]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:179: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:252: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:408: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CCA4F55610>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...dInitThunk [0x75167BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7725BD2B+107]\\\\n\\\\tRtlClearBits [0x7725BCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=121.0.6167.140); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00601673+52979]\nE       \t(No symbol) [0x00587961]\nE       \t(No symbol) [0x0046DD3D]\nE       \t(No symbol) [0x00471F90]\nE       \t(No symbol) [0x00473CE7]\nE       \t(No symbol) [0x004DBDD0]\nE       \t(No symbol) [0x004C44EC]\nE       \t(No symbol) [0x004DB3FE]\nE       \t(No symbol) [0x004C4286]\nE       \t(No symbol) [0x0049C063]\nE       \t(No symbol) [0x0049CECD]\nE       \tGetHandleVerifier [0x00918D83+3294723]\nE       \tGetHandleVerifier [0x00956CC2+3548482]\nE       \tGetHandleVerifier [0x00951C9C+3527964]\nE       \tGetHandleVerifier [0x0069870E+671630]\nE       \t(No symbol) [0x00591EB4]\nE       \t(No symbol) [0x0058D808]\nE       \t(No symbol) [0x0058D92D]\nE       \t(No symbol) [0x0057F7E0]\nE       \tBaseThreadInitThunk [0x75167BA9+25]\nE       \tRtlInitializeExceptionChain [0x7725BD2B+107]\nE       \tRtlClearBits [0x7725BCAF+191]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "ebd0134c-ac6f-4939-9436-cd8bd38f64cb-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "43f7047c-c71d-4685-a6b2-81e16bcddd02-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "from_city", "value": "'Istanbul'"}, {"name": "to_city", "value": "'Dubai'"}, {"name": "start_date", "value": "'05.02.2024'"}, {"name": "end_date", "value": "'10.02.2024'"}], "start": 1706982394123, "stop": 1706982446903, "uuid": "bdff6e72-4125-40f7-9013-9885865b5ef7", "historyId": "6c23bfffcdff539d021b098c1fa7d047", "testCaseId": "bb0e53ce091bdbc3596501f9fe6a31ff", "fullName": "pageObjectTests.test_main_page.TestMainPage#test_open_search_flight_page", "labels": [{"name": "parentSuite", "value": "pageObjectTests"}, {"name": "suite", "value": "test_main_page"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "LAPTOP-PCS77GDM"}, {"name": "thread", "value": "13184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pageObjectTests.test_main_page"}]}